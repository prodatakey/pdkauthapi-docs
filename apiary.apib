FORMAT: 1A
HOST: https://accounts.pdk.io

# PDK Auth API
The PDK Auth API is a collection of centralized authentication and authorization endpoints for initiating and managing secure interaction with the suite of PDK APIs.

The Auth API implements a number of standards conforming flows and grants associated with the [OpenID Connect](http://openid.net/connect/) and [OAuth 2.0](http://oauth.net/2/) authentication and authorization standards.
Being familiar with and referencing these standards will be very helpful in understanding the implementation here.

All requests to this API must be protected by SSL, all URLs in this API are availble solely through HTTPS; HTTP requests are refused.

# Client Setup
Before your application can use the system to authenticate users, it must be registered with PDK and assigned a unique `client_id` and `client_secret`.
If you are interested in creating an application that interacts with the PDK APIs, please contact us for more information.

# Discovery Document
The OpenID Connect standard includes a number of endpoints for authentication, requesting tokens, public keys, and other configuration information.
The specification describes a method for dynamically discoverying this information through the use of a discovery document. The discovery document for the PDK Auth API can be found at:

`https://accounts.pdk.io/.well-known/openid-configuration`

Below is an example of the discovery document formatted as defined in the [OpenID Connect Discovery 1.0](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) standard.
While this is a recent copy of the actual document, the values may change.

    {
        "issuer": "accounts.pdk.io",
        "authorization_endpoint": "https://accounts.pdk.io/oauth2/auth",
        "token_endpoint": "https://accounts.pdk.io/oauth2/token",
        "userinfo_endpoint": "https://accounts.pdk.io/api/users/me/openIdConnect",
        "revocation_endpoint": "https://accounts.pdk.io/oauth2/revoke",
        "jwks_uri": "https://accounts.pdk.io/oauth2/certs",
        "response_types_supported": [ "code" ],
        "subject_types_supported": [ "public" ],
        "id_token_alg_values_supported": [ "RS256" ]
    }

This document is changed infrequently and may be cached by the client application.
Standard HTTP cache headers are used when delivering the document and should be honored.

# Authentication Flows
There are a number of supported authentication flows that are used with certain application types.

## Installed Applications
This flow is for an application that is installed on a user's desktop computer.
The client application must have access to the system browser or a hosted web view in order to facilitate user authenticate with this flow.

There are 4 steps to successfully implementing this flow in your application.

1. Direct the user to an authentication URL through a browser.
2. The user authenticates via the interface presented by the PDK authentication system. An authorization code is returned to your application either through a local HTTP endpoint or via the browser's title.
3. Your application, using Basic HTTP auth with the `client_id` and `client_secret`, makes an OOB request to the auth system to exchange that authorization code for an access token and a refresh token.
4. The access token can now be used to make requests to PDK API endpoints, the refresh token should be durably stored for obtaining a new access token when the current one expires.

![Auth flow](https://dl.dropbox.com/s/2kc4dvkhab16bfb/installed-app-flow.png)

### 1. Authenticate User
The URL to direct the user to can be found in the discovery document `authorization_endpoint` key.

There are a number of querystring parameters that must be included in this URL to properly authenticate the user and generate an authorization code.

|Parameter | Value | Description |
|----------|-------|-------------|
| response_type | code | This tells the authentication server that your application is expecting an authorization code |
| client_id | The `client_id` assigned to your application | This identifies the application that is requesting access to the user's data |
| redirect_uri | The value to tell the auth system how to return the code | This determines how the access code is communcated to the application. You may choose between `urn:ietf:wg:oauth:2.0:oob` or `http://localhost` with a port number. This is covered in more detail below. |
| scope | openid | A space-separated list of access scopes needed by the application. This should contain the value `openid` to specify an OpenID profile. If the application needs a refresh token for access while the user may be away from their computer, add `offline_access` to the list. |
| state | Any value | This is not required, but is available to round-trip any state information that may be useful to your application. |
| login_hint | email address or sub id | If your application knows what user is authenticating, this parameter will be used by the authentication system to pre-fill the login email. |

#### Example URL

    https://accounts.pdk.io/oauth2/auth?
    response_type=code&
    scope=openid&
    redirect_uri=http://localhost:7446&
    client_id=2a66a379df83b55716a3aee9294ef165

### 2. Get Authorization Code
Once the user successfully authenticates, the authorization code will be returned according to the value specified in the `redirect_uri` parameter.
This can be one of two ways.

#### Local HTTP Endpoint
If your application can host an HTTP endpoint to recieve the code, this is the preferred method.
Before redirecting the user to the authentication URL, your application should start listening on a random unused local port.
The `redirect_uri` parameter should then specify this port number; for example, if your application is listening on port 4567 then the value should be `http://localhost:4567`.

Once the user successfully authenticates, the browser will be redirected to your HTTP endpoint with the authorization code in the `code` querystring parameter.
The URL will look similar to `http://localhost:4567?code=fc04ddce7bc3435f5e20b9f3f6f8bcce`.

#### Browser Title Bar
An alternate method for receiving the code is for the authentication flow to set the title of the browser once the user successfully authenticates.
This method will be used when your application specifies `urn:ietf:wg:oauth:2.0:oob` for `redirect_uri`.
Your application will need to watch the title of the web browser to change and contain the string "Success".

Once the user successfully authenticates, the title of the browser will be changed and will contain the auhtorization code.
The title value will look like `Success code=fc04ddce7bc3435f5e20b9f3f6f8bcce`

### 3. Exchange Authorization Code
The authorization code is a one-time-use code that your application uses to retrieve an access token which can then be used to make authenticated API requests.
To exchange the authorization code for an access token your application needs to make an HTTP POST request to the token endpoint of the auth system.
The token endpoint is located in the discovery document `token_endpoint` key.

To make this request, the application must use a standard HTTP basic authentication header with the `client_id` as the user name and `client_secret` as the password used to generate this header.

#### Request
The request must contain a number of form-urlencoded parameters

| Parameter | Description |
|-----------|-------------|
| code | The authorization code received in the previous step. |
| redirect_uri | The value provided in the previous step. This value is not used for returning the access token in the Installed Application flow but is still required. |
| grant_type | This must contain the value `authorization_code` as specified by the OAuth 2 specification. |

The raw HTTP request may look like this:

```
POST /oauth2/token HTTP/1.1
Host: accounts.pdk.io
Content-Type: application/x-www-form-urlencoded
Basic MmE2NmEzNzlkZjgzYjU1NzE2YTNhZWU5Mjk0ZWYxNjU6eW91cl9jbGllbnRfc2VjcmV0

code=fc04ddce7bc3435f5e20b9f3f6f8bcce&
redirect_uri=https://myapp.example.com/code&
grant_type=authorization_code
```

#### Response

The response to the POST request is JSON formatted data containing the access and refresh tokens.

| Value | Description |
|-------|-------------|
| access_token | The access token that may now be used for making authenticated API requests. |
| id_token |  This is an encoded JWT that contains information on the authenticated user. It is described in more detail later. |
| refresh_token | This will be present if the `offline_access` scope was requested. This token is used to get a fresh access token when the current one expires. The refresh token never expires and should be durably and securely stored by your application. |
| token_type | The type of access token returned, this is currently always `Bearer`. |
| expires_in | Expiration time of the Access Token in seconds since the response was generated |

An example JSON encoded response may look like this:

```
{
  "access_token":"SlAV32hkKG"
  "id_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...GmUdC2H13YMCwc30Z3l5RCrbwQ",
  "token_type":"Bearer",
  "refresh_token":"76c5cdeecfd1543cfd4c3e7c054780ac",
  "expires_in": 3600
}
```

### 4. Make API Requests
Now that your application has a valid access token it can now use that token to make authenticated requests to PDK APIs.
This is done by simply including the access token in the Bearer type Authorization header of your requests.

The Authorization header should look similar to:

    Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...GmUdC2H13YMCwc30Z3l5RCrbwQ





## Implicit Client Flow

The [Implicit Flow](http://openid.net/specs/openid-connect-implicit-1_0.html) is intended for Clients, such as client-side javascript applications, that cannot securely maintain a Client Secret between themselves and the Authorization Server.

### 1. Authenticate User
The URL to direct the user to can be found in the discovery document `authorization_endpoint` key.

There are a number of querystring parameters that must be included in this URL to properly authenticate the user and generate the authorization tokens.

|Parameter | Value | Description |
|----------|-------|-------------|
| response_type | id_token token | This requests that both an Access Token and an ID Token be returned from the Authorization Endpoint |
| client_id | The `client_id` assigned to your application | This identifies the application that is requesting access to the user's data |
| redirect_uri | The value to tell the auth system how to return the code | This determines how the access code is communcated to the application. You may choose between `urn:ietf:wg:oauth:2.0:oob` or `http://localhost` with a port number. This is covered in more detail below. |
| scope | openid | This is for future use and should only contain the value `openid` for now. |
| state | Any value | This is not required, but is available to round-trip any state information that may be useful to your application. This value should be secured against modification. |
| login_hint | email address or sub id | If your application knows what user is authenticating, this parameter will be used by the authentication system to pre-fill the login email. |
| nonce | A cryptographically unique one-time-use token | To mitigate replay attacks, this token must have sufficient entropy. The hash of a cryptographically random value stored in local storage should be sufficient. This is forwarded, unchanged inside the id token, back to the client and should be verified. |

#### Example URL

    https://accounts.pdk.io/oauth2/auth?
        response_type=id_token%20token&
        client_id=2a66a379df83b55716a3aee9294ef165&
        redirect_uri=https://myapp.example.com/cb&
        scope=openid&
        state=af0ifjsldkj
        nonce=n-0S6_WzA2Mj

### 2. Receive Token Response
Once the user successfully authenticates, their user-agent will be redirected back to your client's `redirect_uri`. The tokens and other authentication information are included in the fragment portion of the URI, this is mainly so that those values are not captured in webserver logs.

| Value | Description |
|-------|-------------|
| access_token | The access token that may now be used for making authenticated API requests. |
| token_type | The type of access token returned, this is currently always `Bearer`. |
| id_token |  This is an encoded JWT that contains information on the authenticated user. It is described in more detail later. |
| expires_in | Expiration time of the Access Token in seconds since the response was generated. |
| state | Client value included in the `state` parameter of the authentication request. |

    https://myapp.example.com/cb#
        access_token=SlAV32hkKG&
        token_type=bearer&
        id_token=eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso&
        expires_in=3600&
        state=af0ifjsldkj




# Access Token
This is an opaque authentication token that can be used to call the `user_info` endpoint found in the discovery document.
It should be placed in the Authorization header a Bearer value.

For optimum security, these tokens expire frequently and will no longer work after the expiration time.
The application will need to obtain a fresh token in order to continue making authenticated requests to API endpoints.


# ID Token
This token is used for accessing the Accounts System APIs (Users, Panels, Org Units).

The ID token that is returned by the authentication flow is a JWT as specified in the [draft IETF standard](http://tools.ietf.org/html/draft-jones-json-web-token-10).
This token contains claims for the authenticated user, an issuer, a target audience, and an expiration time.
These claims include the user's roles, name, email, user id, and other attributes used to identify and authorize certain actions carried out on the user's behalf.

Since this token is digitally signed by the authentication system, the validity of the data in the token can easily be asserted and trusted.
The public keys for verifying the signature of the token are available at the `jwks_uri` key of the discovery document.

The body of a JWT may look like:

```
{
  "io.pdk.roles": [
    "admin",
    "user"
  ],
  "iat": 1402936513,
  "exp": 1402940113,
  "aud": "2a66a379df83b55716a3aee9294ef165",
  "iss": "io.pdk.accounts",
  "sub": "12345567",
  "at_hash": "MTIzNDU2Nzg5MDEyMzQ1Ng"
}
```

# Refresh Tokens
When the access token expires your application will need a new one.
If you used a flow that provided a refresh token then that can be used to request a new access token from the auth system.
The refresh token should be saved in durable storage as it never expires and will be able to be used to retrieve fresh access tokens unless the user or PDK revokes access to the client application.

#### Request
Requesting a refresh token is very similar to exchanging an authorization code for an access token.
Your application will need to make an HTTP POST request to the token endpoint which can be found in the discovery document `token_endpoint` key.

To make this request, the application must use a standard HTTP basic authentication header with the `client_id` as the user name and `client_secret` as the password used to generate this header.

The request must contain a number of form-urlencoded parameters

| Parameter | Description |
|-----------|-------------|
| refresh_token | This is the persistent refresh token that your application should have received during the initial user authentication. |
| grant_type | This must contain the value `refresh_token` as specified by the OAuth 2 specification. |

The raw HTTP request may look like this:

```
POST /oauth2/token HTTP/1.1
Host: accounts.pdk.io
Content-Type: application/x-www-form-urlencoded
Basic MmE2NmEzNzlkZjgzYjU1NzE2YTNhZWU5Mjk0ZWYxNjU6eW91cl9jbGllbnRfc2VjcmV0

refresh_token=76c5cdeecfd1543cfd4c3e7c054780ac&
grant_type=refresh_token
```

#### Response

The response to the POST request is JSON formatted data containing the fresh access token.

| Value | Description |
|-------|-------------|
| id_token | The access token that may now be used for making authenticated API requests. This is an encoded JWT that is described in more detail later. |
| token_type | The type of access token returned, this is currently always `Bearer`.

An example JSON encoded response may look like this:

```
{
  "id_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...GmUdC2H13YMCwc30Z3l5RCrbwQ",
  "token_type":"Bearer"
}
```

# Account System API

# Group Users
The User entity represents a distinct security context identified by a username and a password.

# Group Panels
The Panel entity represents the CPE that hosts of the PDK Panel API.

## Panel Collection [/panels]
### List all Panels [GET]
+ Request
    + Headers
    
            Authorization: Bearer {token}
        
+ Response 200 (application/json)
    + Headers

            Link: <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=3&per_page=10>; rel="last"
            X-Total-Count: 25

    + Body
    
            [
                {
                    "id": "10702MQ",
                    "apiEndpoint": "https://panel-10702MQ.pdk.io/api"
                },
                {
                    "id": "10702ZB",
                    "apiEndpoint": "https://panel-10702ZB.pdk.io/api"
                }
            ]
            
### Register a Panel [POST]
+ Request (application/json)
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
        
            {
                "serial": "10702MQ",
                "ou": "5400fdacf5409b745231ce34"
            }


+ Response 201
    + Headers
    
            Location: https://accounts.pdk.io/panels/10702MQ


## Panel [/panels/{id}]
A distinct Panel entity.
+ Parameters
    + id (required, number, `10702MQ`) ... Numeric `id` of the Panel to perform the action on.
    
### Retrieve a Panel [GET]
+ Response 200 (application/json)

### Update a Panel [PUT]
+ Response 204

### Deregister a Panel [DELETE]
+ Response 204

## Panel API Token [/panels/{id}/token]
To access the panel's API endpoint your applicaiton needs to have a valid, unexpired, and discrete auth token.
+ Parameters
    + id (required, number, `10702MQ`) ... Numeric `id` of the Panel to perform the action on.

### Generate an API Token [PUT]
Generate a time-limited Bearer token for the current user's access to the panel's API.
This token will only work for accessing the panel specified in the `id` parameter.
If there was an unexpired token already generated for this user/panel, that token will be provided.
+ Response 200 (application/json)

        {
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...GmUdC2H13YMCwc30Z3l5RCrbwQ"
        }


# Group Organizational Units
The Organizational Unit entity is a heirarchical container of Users, Panels, and other Organizational Units.
Each of these entities can only be a member of a single Organization.
A User has access (according to their roles) to all of the Users, Panels, and Organizations at their level and deeper in the heirarchy.
